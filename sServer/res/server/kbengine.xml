<root>
	<!--
		服务端配置({assets}/res/server/kbengine.xml)

		如果你需要改变引擎设置, 请在({assets}/res/server/kbengine.xml)中覆盖kbe/res/server/kbengine_defs.xml的对应参数来修改, 
		这样的好处是不会破坏引擎的默认设置，在你更新引擎时也不会产生冲突，以及在多个逻辑项目时不会影响到其他的项目设置。
		详细说明请参考：http://kbengine.org/cn/docs/configuration/kbengine.html
	-->
	
	<trace_packet>
		<debug_type> 0 </debug_type>
	</trace_packet>
	
	<app_publish> 0 </app_publish>
	
	<!-- defined => kbe/res/server/kbengine_defs.xml -->
	<dbmgr>
		<!-- 脚本入口模块， 相当于main函数 
			(Entry module, like the main-function)
		-->
		<entryScriptFile> kbemain </entryScriptFile>
			
		<!-- debug模式下可输出读写操作信息
		    (Debug mode can output the read and write informations)
		 -->
		<debug> false </debug>
		
		<!-- 是否检查defs-MD5
			(Check whether the defs-MD5) 
		-->
		<allowEmptyDigest> false </allowEmptyDigest>					<!-- Type: Boolean -->
		
		<!-- 指定接口地址，可配置网卡名、MAC、IP
			（Interface address specified, configurable NIC/MAC/IP） 
		-->
		<internalInterface>  </internalInterface>
		
		<!-- Interfaces进程的地址（参考interfaces中地址配置）
			(Address of Interfaces process)
		-->
		<InterfacesServiceAddr>
			<!-- 如果enable为false则相关数据不转发到Interfaces进程 
				注意：如果为true，dbmgr认为数据将由interfaces交给第三方平台处理
			-->
			<enable> true		</enable>
			<host>	 localhost	</host>
			<port>	 30099		</port>
		</InterfacesServiceAddr>

		<!-- 数据库接口 
			(database interfaces)
		-->
		<databaseInterfaces>
			<!-- 数据库接口名称 （可以定义多个不同的接口，但至少存在一个default）
				（Database interface name)
			-->
			<default>
				<!-- 如果为true，则为纯净的数据库，引擎不创建实体表 
					（If true is pure database, engine does not create the entity table)
				-->
				<pure> false </pure>

				<!-- 数据库类型 （mysql、redis）
					（Database type(mysql, redis))
				-->
				<type> mysql </type>											<!-- Type: String -->

				<!-- 数据库地址 
					（Database address)
				-->
				<host> rm-bp15s8387t3135i67.mysql.rds.aliyuncs.com </host>										<!-- Type: String -->
				<port> 3306 </port>												<!-- Type: Integer -->

				<!-- 数据库账号验证 
					（Database auth)
				-->
				<auth>  
					<username> kbe </username>									<!-- Type: String -->
					<password> 4Killall </password>									<!-- Type: String -->
					
					<!-- 为true则表示password是加密(rsa)的, 可防止明文配置 
						(is true, password is RSA)
					-->
					<encrypt> true </encrypt>
				</auth>

				<!-- 数据库名称 
					(Database name)
				-->
				<databaseName> kbe </databaseName> 								<!-- Type: String -->
				
				<!-- 数据库允许的连接数 
					(Number of connections allowed by the database)
				-->
				<numConnections> 5 </numConnections>							<!-- Type: Integer -->
				
				<!-- 字符编码类型 
					(Character encoding type)
				-->
				<unicodeString>
					<characterSet> utf8 </characterSet> 						<!-- Type: String -->
					<collation> utf8_bin </collation> 							<!-- Type: String -->
				</unicodeString>
			</default>
		</databaseInterfaces>

		<!-- 账号系统
			(Account system)
		-->
		<account_system>
			<!-- 账号Entity的名称
			    (Name of AccountEntity)
			 -->
			<accountEntityScriptType>	Account	</accountEntityScriptType>
			
			<!-- 新账号默认标记(可组合，填写时按十进制格式) 
				(Default flags a new account, Can be combined, Fill in decimal format when)
				常规标记(normal flag)	= 0x00000000
				锁定标记(lock flag)	= 0x000000001
				未激活标记(normal flag)	= 0x000000002
			-->
			<accountDefaultFlags> 0 </accountDefaultFlags>							<!-- Type: Integer -->
			
			<!-- 新账号默认过期时间(秒, 引擎会加上当前时间) 
				(New account default expiration time (seconds, the engine will add the current time))
			-->
			<accountDefaultDeadline> 0 </accountDefaultDeadline>						<!-- Type: Integer -->

			<!-- 账号找回密码相关
				(Account reset password)
			-->
			<account_resetPassword>
				<!-- 是否开放重设密码
					(Whether open reset password)
				-->
				<enable>	false	</enable>
			</account_resetPassword>
			
			<!-- 账号注册相关
				(Account registration)
			-->
			<account_registration> 
				<!-- 是否开放注册 
					(Whether open registration)
				-->
				<enable>	false	</enable>
				
				<!-- 登录合法时游戏数据库找不到游戏账号则自动创建 
					(When logged in, the game database can not find the game account is automatically created)
				-->
				<loginAutoCreate> false </loginAutoCreate>
			</account_registration>
		</account_system>

		<!-- Telnet服务, 如果端口被占用则向后尝试32001.. 
			(Telnet service, if the port is occupied backwards to try 32001)
		-->
		<telnet_service>
			<port> 32000 </port>
			<password> kbe </password>
			<!-- 命令默认层 
				(layer of default the command)
			-->
			<default_layer> python </default_layer>
		</telnet_service>
	</dbmgr>
	
	<cellapp>
	</cellapp>
	
	<baseapp>
		<!-- 脚本入口模块， 相当于main函数 
			(Entry module, like the main-function)
		-->
		<entryScriptFile> kbemain </entryScriptFile>

		<!-- 指定接口地址，可配置网卡名、MAC、IP
			（Interface address specified, configurable NIC/MAC/IP） 
		-->
		<internalInterface> 10.51.38.17 </internalInterface>
		<externalInterface> 120.26.132.214 </externalInterface>						<!-- Type: String -->
		
		<!-- 强制指定外部IP地址或者域名，在某些网络环境下，可能会使用端口映射的方式来访问局域网内部的KBE服务器，那么KBE在当前
			的机器上获得的外部地址是局域网地址，此时某些功能将会不正常。例如：账号激活邮件中给出的回调地址, 登录baseapp。
			注意：服务端并不会检查这个地址的可用性，因为无法检查。
			(Forced to specify an external IP-address or Domain-name, In some server environment, May use the port mapping to access KBE,
			So KBE on current machines on the external IP address may be a LAN IP address, Then some functions will not normal.
			For example: account activation email address given callback.
			Note: the availability of server does not check the address, because cannot check)
		-->
		<externalAddress> 120.26.132.214 </externalAddress>							<!-- Type: String -->
		
		<!-- 暴露给客户端的端口范围
			（Exposed to the client port range） 
		-->
		<externalPorts_min> 20015 </externalPorts_min>					<!-- Type: Integer -->
		<externalPorts_max> 20019 </externalPorts_max>					<!-- Type: Integer -->

		<!-- 自动存档的时间周期(秒)
			（Automatic archiving time period(secs)） 
		-->
		<archivePeriod> 300 </archivePeriod> 							<!-- Type: Float -->
		
		<!-- 自动备份的时间(秒)
			（Automatic backup time period(secs)） 
		-->
		<backupPeriod> 300 </backupPeriod>								<!-- Type: Float -->
		
		<!-- 是否备份未定义的属性
			（Whether backup undefined property） 
		-->
		<backUpUndefinedProperties> 0 </backUpUndefinedProperties>		<!-- Type: Boolean -->

		<!-- 负载平衡滤波器指标值
			（Load balancing Smoothing Bias value） 
		-->
		<loadSmoothingBias> 0.01 </loadSmoothingBias>

		<!-- 资源下载带宽限制
			（Download bandwidth limits） 
		-->
		<downloadStreaming>
			<bitsPerSecondTotal> 1000000 </bitsPerSecondTotal>			<!-- Type: Int -->
			<bitsPerSecondPerClient> 100000 </bitsPerSecondPerClient>	<!-- Type: Int -->
		</downloadStreaming>

		<!-- entityID分配器，进入溢出范围则请求获取新的ID资源 
			(The entityID allocator, enter the overflow area will get the new ID's)
		-->
		<ids>
			<criticallyLowSize> 500 </criticallyLowSize>				<!-- Type: Integer -->
		</ids>
		
		<!-- 当灾难发生后，baseapp进行灾难恢复时，每次恢复entity的数量 
			(When after the disaster, When baseapp recovery, Each time the number of recovery entity's)
		-->
		<entityRestoreSize> 32 </entityRestoreSize>
		
		<!-- 程序的性能分析
			（Analysis of program performance） 
		-->
		<profiles>
			<!-- 如果设置为true，引擎启动时就会开始记录相关profile信息， 进程退出后将导出一份报告 
				(if is true, Engine start is completed, start to record profile information, 
				Process exit will export a report.)
			-->
			<cprofile> false </cprofile>
			<pyprofile> false </pyprofile>
			<eventprofile> false </eventprofile>
			<networkprofile> false </networkprofile>
		</profiles>
		
		<!-- listen监听队列最大值
		    (listen: Maximum listen queue)
		 -->
		<SOMAXCONN> 128 </SOMAXCONN>
		
		<!-- Telnet服务, 如果端口被占用则向后尝试40001.. 
			(Telnet service, if the port is occupied backwards to try 40001)
		-->
		<telnet_service>
			<port> 40000 </port>
			<password> kbe </password>
			<!-- 命令默认层 
				(layer of default the command)
			-->
			<default_layer> python </default_layer>
		</telnet_service>
		
		<!-- 服务端关闭过程的参数 
			(Parameter server shutdown process)
		-->
		<shutdown>
			<!-- 每秒销毁base的数量
				(The destroy of the per-seconds base's)
			-->
			<perSecsDestroyEntitySize> 15 </perSecsDestroyEntitySize>
		</shutdown>
		
		<respool>
			<!-- 缓冲区大小也等于资源大小， 在这个KB大小范围以内的资源才可以进入资源池 
				(Buffer size is equal to the size of resources, 
				Less than the buffer resources before they can enter the resource pool)
			-->
			<buffer_size> 1024 </buffer_size>
			
			<!-- 资源池中的资源超过这个时间未被访问则销毁(秒) 
			(Resources have not been accessed overtime will be destroyed (s))
			-->
			<timeout> 600 </timeout>
			
			<!-- 资源池检查tick(秒) 
				(Resource pool check tick (secs))
			-->
			<checktick>60</checktick>
		</respool>
	</baseapp>
	
	<cellappmgr>
	</cellappmgr>
	
	<baseappmgr>
	</baseappmgr>
	
	<loginapp>
		<!-- 脚本入口模块， 相当于main函数 
			(Entry module, like the main-function)
		-->
		<entryScriptFile> kbemain </entryScriptFile>
		
		<!-- 指定接口地址，可配置网卡名、MAC、IP
			（Interface address specified, configurable NIC/MAC/IP） 
		-->
		<internalInterface> 10.51.38.17 </internalInterface>
		<externalInterface> 120.26.132.214 </externalInterface>						<!-- Type: String -->
		
		<!-- 强制指定外部IP地址或者域名，在某些网络环境下，可能会使用端口映射的方式来访问局域网内部的KBE服务器，那么KBE在当前
			的机器上获得的外部地址是局域网地址，此时某些功能将会不正常。例如：账号激活邮件中给出的回调地址, 登录baseapp。
			注意：服务端并不会检查这个地址的可用性，因为无法检查。
			(Forced to specify an external IP-address or Domain-name, In some server environment, May use the port mapping to access KBE,
			So KBE on current machines on the external IP address may be a LAN IP address, Then some functions will not normal.
			For example: account activation email address given callback.
			Note: the availability of server does not check the address, because cannot check)
		-->
		<externalAddress> 120.26.132.214 </externalAddress>							<!-- Type: String -->
		
		<!-- 暴露给客户端的端口范围
			（Exposed to the client port range） 
		-->
		<externalPorts_min> 20013 </externalPorts_min>					<!-- Type: Integer -->
		<externalPorts_max> 0 </externalPorts_max>						<!-- Type: Integer -->
		
		<!-- 加密登录信息
			(The encrypted user login information)
			
			可选择的加密方式(Optional encryption):
				0: 无加密(No Encryption)
				1: Blowfish
				2: RSA (res\key\kbengine_private.key)
		 -->
		<encrypt_login> 2 </encrypt_login>
		
		<!-- listen监听队列最大值
		    (listen: Maximum listen queue)
		 -->
		<SOMAXCONN> 128 </SOMAXCONN>
		
		<!-- 账号的类型								(Account types)
			1: 普通账号								(Normal Account)
			2: email账号(需要激活)					(Email Account, Note: activation required.)
			3: 智能账号(自动识别Email， 普通号码等)	(Smart Account (Email or Normal, etc.))
		-->
		<account_type> 3 </account_type>
		
		<!-- http回调接口，处理认证、密码重置等 
			(Http-callback interface, handling authentication, password reset, etc.)
		-->
		<http_cbhost> localhost </http_cbhost>
		<http_cbport> 21103 </http_cbport>
		
		<!-- Telnet服务, 如果端口被占用则向后尝试31001.. 
			(Telnet service, if the port is occupied backwards to try 31001)
		-->
		<telnet_service>
			<port> 31000 </port>
			<password> kbe </password>
			<!-- 命令默认层 
				(layer of default the command)
			-->
			<default_layer> python </default_layer>
		</telnet_service>
	</loginapp>		
	
	<machine>
		<!-- 暴露给客户端的端口范围
			（Exposed to the tools port range） 
		-->
		<externalPorts_min> 20099 </externalPorts_min>					<!-- Type: Integer -->
		<externalPorts_max> 0 </externalPorts_max>						<!-- Type: Integer -->
		
		<!-- 服务组使用多台硬件组成网络，在某些网络环境由于路由器的设置不允许UDP广播造成跨物理机组网不成功时
			可在此填入所有相关物理机的地址，引擎将会向具体的地址发送探测包来完成组网，
			注意：如果指定了地址池引擎将不再发送全网广播包。
			（When the network is composed of a plurality of hardware, the specific network address is detected.） 
		-->
		<addresses>
			<!--<item> 127.0.0.1 </item>-->
			<!--<item> 10.51.38.17 </item>-->
		</addresses>
	</machine>
	<interfaces>
		<!-- 脚本入口模块， 相当于main函数 
			(Entry module, like the main-function)
		-->
		<entryScriptFile> kbemain </entryScriptFile>
		
		<!-- interfaces的地址，多组游戏服务端可以共用一个interfaces
			(interfaces address, multiple gameserver can share a interfaces)
		-->
		<host> 10.51.38.17 </host>
		<port> 30099 	</port>
		
		<!-- 订单超时(秒) 
			(Orders timeout(seconds))
		-->
		<orders_timeout> 3600 	</orders_timeout>
		
		
		<!-- listen监听队列最大值
		    (listen: Maximum listen queue)
		 -->
		<SOMAXCONN> 128 </SOMAXCONN>
		
		<!-- Telnet服务, 如果端口被占用则向后尝试33001.. 
			(Telnet service, if the port is occupied backwards to try 33001)
		-->
		<telnet_service>
			<port> 33000 </port>
			<password> kbe </password>
			<!-- 命令默认层 
				(layer of default the command)
			-->
			<default_layer> python </default_layer>
		</telnet_service>
	</interfaces>
	<bots>
		<!-- 默认启动进程后自动添加这么多个机器人 
			(After starting the process, automatically add some robots)
			totalCount	： 添加总数量			(Add the total-number)
			tickTime	： 每次添加所用时间(s)	(Interval time-secs)
			tickCount	： 每次添加数量			(Each time you add the number of)
		-->
		<defaultAddBots> 
			<totalCount> 10  </totalCount>								<!-- Type: Integer -->
			<tickTime> 0.1  </tickTime>									<!-- Type: Float -->
			<tickCount> 5  </tickCount>									<!-- Type: Integer -->
		</defaultAddBots>
	</bots>
</root>
